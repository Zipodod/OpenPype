services:
  - name: docker:20.10.20-dind
    alias: docker

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - build
  - deploy
  - release

build-centos7:
  tags:
    - dind
  stage: build
  variables:
    BUILD_OS: centos7
  script:
    - apk add --no-cache bash
    - apk add --no-cache curl
    - apk add --no-cache python3
    - ./tools/docker_build.sh $BUILD_OS
    - version_command="import os;exec(open(os.path.join('./', 'openpype', 'version.py')).read());print('.'.join(__version__.split('.')[:2]));"
    - openpype_version="$(python3 -c "${version_command}")"
    - "tar -czvf ./build/openpype-${openpype_version}-${BUILD_OS}.tar.gz ./build"
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./build/openpype-${openpype_version}-${BUILD_OS}.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/openpype/${openpype_version}/openpype-${openpype_version}-${BUILD_OS}.tar.gz"'
  when: manual

build-debian:
  tags:
    - dind
  stage: build
  variables:
    BUILD_OS: debian
  script:
    - apk add --no-cache bash
    - apk add --no-cache curl
    - apk add --no-cache python3
    - ./tools/docker_build.sh $BUILD_OS
    - version_command="import os;exec(open(os.path.join('./', 'openpype', 'version.py')).read());print('.'.join(__version__.split('.')[:2]));"
    - openpype_version="$(python3 -c "${version_command}")"
    - "tar -czvf ./build/openpype-${openpype_version}-${BUILD_OS}.tar.gz ./build"
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./build/openpype-${openpype_version}-${BUILD_OS}.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/openpype/${openpype_version}/openpype-${openpype_version}-${BUILD_OS}.tar.gz"'
  when: manual

build-ubuntu:
  tags:
    - dind
  stage: build
  variables:
    BUILD_OS: ubuntu20.04
  script:
    - apk add --no-cache bash
    - apk add --no-cache curl
    - apk add --no-cache python3
    - ./tools/docker_build.sh
    - version_command="import os;exec(open(os.path.join('./', 'openpype', 'version.py')).read());print('.'.join(__version__.split('.')[:2]));"
    - openpype_version="$(python3 -c "${version_command}")"
    - "tar -czvf ./build/openpype-${openpype_version}-${BUILD_OS}.tar.gz ./build"
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./build/openpype-${openpype_version}-${BUILD_OS}.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/openpype/${openpype_version}/openpype-${openpype_version}-${BUILD_OS}.tar.gz"'
  when: manual

build-patch:
  tags:
    - dind
  stage: build
  image: python:3.9
  script:
    - mkdir -p /tmp/build/op
    - ./tools/create_zip.sh --path /tmp/build/op && ls -la /tmp/build/op
#    - mv /tmp/build/op ./build
#    - ls -la ./build
  artifacts:
    paths:
      - ./build
  when: manual
  allow_failure: false
#
#deploy-patch:
#  tags:
#    - cw-pvc
#  stage: deploy
#  script:
#    - ls -la ./build
#    - cp -R ./build /pipe/test/
##    - chown -R 1000:776523089 /pipe/openpype/versions/build
#  dependencies:
#    - build-patch
#  needs:
#    - build-patch
#
#deploy-to-deadline:
#  tags:
#    - cw-pvc
#  stage: deploy
#  script:
#    - rsync -rltvhpog --chmod=777 --chown=nobody:nogroup --delete $CI_PROJECT_DIR/openpype/modules/deadline/repository/custom/plugins/* /deadline/custom/plugins/
#  rules:
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#      changes:
#        - openpype/modules/deadline/repository/custom/plugins/**/*
#
#patch-release:
#  tags:
#    - dind
#  stage: release
#  image: registry.gitlab.com/gitlab-org/release-cli:latest
#  script:
#    - apk add --no-cache python3
#    - version_command="import os;exec(open(os.path.join('./', 'openpype', 'version.py')).read());print(__version__);"
#    - openpype_version="$(python3 -c "${version_command}")"
#    - release-cli create --description "Release ${openpype_version} using CI pipeline $CI_PIPELINE_ID" --tag-name "test-${openpype_version}"
#  needs:
#    - deploy-patch
